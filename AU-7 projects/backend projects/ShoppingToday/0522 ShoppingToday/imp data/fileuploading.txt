Fileuploading

1. npm install --save express-fileupload fs-extra mkdirp resize-img
    mkdirp - Create a new directory and any necessary subdirectories at dir with octal permission string opts.mode. If opts is a string or number, it will be treated as the opts.mode.
    express-fileupload - Simple express middleware for uploading files.
    fs-extra- fs-extra adds file system methods that aren't included in the native fs module and adds promise support to the fs methods. It also uses graceful-fs to prevent EMFILE errors. It should be a drop in replacement for fs.

2. load express-fileupload, fs-extra and mkdirp in app.js
    2.1 const fileUplaod = require('express-fileupload')
    2.2 const mkdirp = require('mkdirp') at routes/admin_products.js
    2.3 const fs = require('fs-extra') at routes/admin_products.js
    2.4 const resizeImg = require('resize-img') at routes/admin_products.js

3. Add express fileUpload middleware above bodyParser at app.js

4. Set the route at app.js

5. at product.ejs page
        <td> <%= product.category %></td>
        <td>
            <% if( product.image = ""){%  <!--means no images-->>    
                <img src="/images/noimage.png" alt=""> <!--image thumb nail when blank image-->
                <% } else {%>
                        <img src="/product_image/<%= product._id %>/<%= product.image %>">
                        <!--creating folder with id name-->
                    <% } %>
            </td>
6. add_product.ejs

    <form method="POST" action="/admin/products/add-product" enctype="multipart/form-data" >
    <div class="form-group">
        <label for=" ">Image</label>
        <input type="file" name="image"  id="img" class="form-control">
        <img src="#" id="impPreview" alt=" ">
    </div>

    <button class="btn btn-primary"> Submit</button>
    </form>
7. add_product.ejs  
    create script to 
      function readURL(input){
          if(input.files && input.files[0]) {
              var reader = new FileReader();

              reader.onload = function(e){
                  $('#imgPreview").attr('src', e.target.result).width(100).height(100);
              }
              reader.readAsDataURL(input.files[0]);
          }
      }
    $("#img").change(function() {
        readURL(this);
    })

8. validating image at app.js
    };
    },
    //Validationg image
        customValidation:{
            isImage:function(value, filename){
                var extension = (path.extname(file)).toLowerCase();
                    switch(extension){
                        case 'jpg':
                            return '.jpg';
                        case 'jpeg':
                            return '.jpeg';
                        case 'png':
                            return '.png';
                        case ' ':
                            return '.jpg';
                        default :
                            return false
                    }
            }
        }

9. routes/add_product.js GET method 
    router.get('/add-product', (req, res)=>{
        var title = '';   //variables to pass in the view
        var desc= '';
        var price= '';

        Category.find(function(err, categories){   //finding product inside the respective category
            res.render('admin/add_product',{  // will render in views/admin/add_page with variables
                title: title,
                desc: desc,
                categories: categories,
                price: price
            });
        
        })
    }); 

10.  routes/add.product.js  POST method        


